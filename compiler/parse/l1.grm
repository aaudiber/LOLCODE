(* LOLCODE Compiler *)

structure A = Ast

(* for simplicity, we only mark expressions, not statements *)

(* mark e with region (left, right) in source file *)
fun mark (e, (left, right)) = A.Marked (Mark.mark' (e, ParseState.ext (left, right)))
fun marks (s, (left, right)) = A.Markeds (Mark.mark' (s, ParseState.ext (left, right)))

%%
%header (functor L1LrValsFn (structure Token : TOKEN))

%term
   EOF
 | HAI
 | KTHXBYE
 | FOUNDYR
 | IHAZA
 | ITZ
 | HOW
 | DUZ
 | I
 | MAIN
 | IF
 | U
 | SAY
 | SO
 | R
 | AN
 | INTCONST of Word32.word
 | IDENT of Symbol.symbol
 | SUMOF | DIFFOF | PRODUKTOF | QUOSHUNTOF | MODOF
 | NEG

%nonterm
   program  of A.stm list
 | stmts    of A.stm list
 | stmt     of A.stm
 | decl     of A.stm
 | declas   of A.stm
 | simp     of A.stm
 | lvalue   of A.ident
 | exp      of A.exp

%verbose       (* print summary of errors *)
%pos int       (* positions *)
%start program (* what is the top-most non-terminal expected to be ? *)
%eop EOF       (* which terminal ends parsing? *)
%noshift EOF   (* we should never shift an EOF *)

%name L1

(* The precedence grows down! *)
%left SUMOF DIFFOF PRODUKTOF QUOSHUNTOF MODOF NEG

%%
program    : HAI HOW DUZ I MAIN stmts IF U SAY SO KTHXBYE (stmts)

stmts      :                       ([])
           | stmt stmts            (stmt :: stmts)

stmt       : IHAZA IDENT           (marks (A.Decl IDENT, (IHAZAleft, IDENTright)))
           | IHAZA IDENT ITZ exp   (marks (A.DeclAssn (IDENT, exp), (IHAZAleft, expright)))
           | IDENT R exp           (marks (A.Assign (IDENT, exp), (IDENTleft, expright)))
           | FOUNDYR exp           (marks ((A.Return exp), (FOUNDYRleft, expright)))

exp        : INTCONST              (mark (A.ConstExp(INTCONST),(INTCONSTleft,INTCONSTright)))
           | IDENT                 (mark (A.Var(IDENT), (IDENTleft,IDENTright)))
           | SUMOF exp AN exp      (mark (A.OpExp (A.PLUS, [exp1,exp2]), (exp1left,exp2right)))
           | DIFFOF exp AN exp     (mark (A.OpExp (A.MINUS, [exp1,exp2]), (exp1left,exp2right)))
           | PRODUKTOF exp AN exp  (mark (A.OpExp (A.TIMES, [exp1,exp2]), (exp1left,exp2right)))
           | QUOSHUNTOF exp AN exp (mark (A.OpExp (A.DIVIDEDBY, [exp1,exp2]), (exp1left,exp2right)))
           | MODOF exp AN exp      (mark (A.OpExp (A.MODULO, [exp1,exp2]), (exp1left,exp2right)))
           | NEG exp               (mark (A.OpExp (A.NEGATIVE, [exp]), (NEGleft,expright)))
